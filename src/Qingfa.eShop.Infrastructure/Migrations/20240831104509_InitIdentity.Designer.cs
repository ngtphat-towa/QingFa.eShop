// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QingFa.EShop.Infrastructure.Persistence;

#nullable disable

namespace Qingfa.eShop.Infrastructure.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    [Migration("20240831104509_InitIdentity")]
    partial class InitIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AttributeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AttributeGroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFilterable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowToCustomers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AttributeCode")
                        .IsUnique();

                    b.HasIndex("AttributeGroupId");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ProductAttributes_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ProductAttributes_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ProductAttributes_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ProductAttributes_LastModifiedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductAttributes_Status");

                    b.ToTable("ProductAttributes");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ProductAttributeGroups_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ProductAttributeGroups_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ProductAttributeGroups_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ProductAttributeGroups_LastModifiedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductAttributeGroups_Status");

                    b.ToTable("ProductAttributeGroups");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ProductAttributeOptions_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ProductAttributeOptions_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ProductAttributeOptions_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ProductAttributeOptions_LastModifiedBy");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductAttributeOptions_Status");

                    b.ToTable("ProductAttributeOptions");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VariantStatus")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariant.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ProductVariant_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ProductVariant_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ProductVariant_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ProductVariant_LastModifiedBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductVariant_Status");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariantAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisibleToCustomer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductAttributeOptionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ProductVariantAttributes_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ProductVariantAttributes_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ProductVariantAttributes_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ProductVariantAttributes_LastModifiedBy");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductAttributeOptionId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductVariantAttributes_Status");

                    b.HasIndex("ProductVariantId", "ProductAttributeId", "ProductAttributeOptionId")
                        .IsUnique();

                    b.ToTable("ProductVariantAttributes");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_Brands_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Brands_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_Brands_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_Brands_LastModifiedBy");

                    b.HasIndex("Name");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Brands_Status");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_Categories_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Categories_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_Categories_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_Categories_LastModifiedBy");

                    b.HasIndex("Name");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Categories_Status");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockLevel")
                        .HasColumnType("INTEGER");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "QingFa.EShop.Domain.Catalogs.Entities.Product.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT");
                        });

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_Products_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Products_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_Products_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_Products_LastModifiedBy");

                    b.HasIndex("Name");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Products_Status");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Metas.ExampleMeta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_ExampleMetas_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ExampleMetas_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_ExampleMetas_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ExampleMetas_LastModifiedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ExampleMetas_Status");

                    b.ToTable("ExampleMetas");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastPasswordChange")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PasswordResetExpires")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("Resource")
                        .HasColumnType("INTEGER");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_Permission_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_Permission_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_Permission_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_Permission_LastModifiedBy");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Permission_Status");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.Roles.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<short>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Created")
                        .HasDatabaseName("IX_RolePermission_Created");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_RolePermission_CreatedBy");

                    b.HasIndex("LastModified")
                        .HasDatabaseName("IX_RolePermission_LastModified");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_RolePermission_LastModifiedBy");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_RolePermission_Status");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttribute", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeOption", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttribute", "Attribute")
                        .WithMany("AttributeOptions")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariant", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariantAttribute", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttribute", "Attribute")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeOption", "Option")
                        .WithMany()
                        .HasForeignKey("ProductAttributeOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariant", "Variant")
                        .WithMany("VariantAttributes")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Option");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Brand", b =>
                {
                    b.OwnsOne("QingFa.EShop.Domain.Common.ValueObjects.SeoMeta", "SeoMeta", b1 =>
                        {
                            b1.Property<Guid>("BrandId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CanonicalUrl")
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Robots")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.HasKey("BrandId");

                            b1.HasIndex("Description");

                            b1.HasIndex("Keywords");

                            b1.HasIndex("Title");

                            b1.ToTable("Brands");

                            b1.WithOwner()
                                .HasForeignKey("BrandId");
                        });

                    b.Navigation("SeoMeta")
                        .IsRequired();
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Category", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("QingFa.EShop.Domain.Common.ValueObjects.SeoMeta", "SeoMeta", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CanonicalUrl")
                                .HasMaxLength(1000)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Keywords")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Robots")
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT");

                            b1.HasKey("CategoryId");

                            b1.HasIndex("Description");

                            b1.HasIndex("Keywords");

                            b1.HasIndex("Title");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("ParentCategory");

                    b.Navigation("SeoMeta")
                        .IsRequired();
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.CategoryProduct", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Product", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Product", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.RefreshToken", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.Roles.RolePermission", b =>
                {
                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.Permissions.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Infrastructure.Identity.Entities.Roles.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttribute", b =>
                {
                    b.Navigation("AttributeOptions");

                    b.Navigation("VariantAttributes");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductAttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Attributes.ProductVariant", b =>
                {
                    b.Navigation("VariantAttributes");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Category", b =>
                {
                    b.Navigation("CategoryProducts");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Product", b =>
                {
                    b.Navigation("CategoryProducts");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.AppUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("QingFa.EShop.Infrastructure.Identity.Entities.Roles.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
