// <auto-generated />
using System;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

using QingFa.EShop.Infrastructure.Persistence;

#nullable disable

namespace QingFa.eShop.Infrastructure.Migrations
{
    [DbContext(typeof(EShopDbContext))]
    partial class EShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.ArticleType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("IsExchangeable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReturnable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTryAndBuyEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("PickupEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("SocialSharingEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ArticleTypes", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.Brand", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CountryOfOrigin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EstablishmentYear")
                        .HasColumnType("int");

                    b.Property<string>("LogoURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("WebsiteURL")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("CatalogBrands", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.ImageData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Resolutions")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ImageData", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.SizeOption", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("InventoryCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumValue")
                        .HasColumnType("int");

                    b.Property<string>("SizeLabel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SizeOptions", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.StyleImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BackImageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DefaultImageId")
                        .HasColumnType("integer");

                    b.Property<int>("FrontImageId")
                        .HasColumnType("integer");

                    b.Property<int>("RightImageId")
                        .HasColumnType("integer");

                    b.Property<int>("SearchImageId")
                        .HasColumnType("integer");

                    b.Property<string>("SizeRepresentationUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackImageId");

                    b.HasIndex("DefaultImageId");

                    b.HasIndex("FrontImageId");

                    b.HasIndex("RightImageId");

                    b.HasIndex("SearchImageId");

                    b.ToTable("StyleImage", (string)null);
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.ArticleType", b =>
                {
                    b.OwnsOne("QingFa.EShop.Domain.Catalogs.ValueObjects.ServiceabilityDisclaimer", "ServiceabilityDisclaimer", b1 =>
                        {
                            b1.Property<long>("ArticleTypeId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Desc")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.HasKey("ArticleTypeId");

                            b1.ToTable("ArticleTypes");

                            b1.WithOwner()
                                .HasForeignKey("ArticleTypeId");
                        });

                    b.Navigation("ServiceabilityDisclaimer")
                        .IsRequired();
                });

            modelBuilder.Entity("QingFa.EShop.Domain.Catalogs.Entities.StyleImage", b =>
                {
                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.ImageData", "BackImage")
                        .WithMany()
                        .HasForeignKey("BackImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.ImageData", "DefaultImage")
                        .WithMany()
                        .HasForeignKey("DefaultImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.ImageData", "FrontImage")
                        .WithMany()
                        .HasForeignKey("FrontImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.ImageData", "RightImage")
                        .WithMany()
                        .HasForeignKey("RightImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QingFa.EShop.Domain.Catalogs.Entities.ImageData", "SearchImage")
                        .WithMany()
                        .HasForeignKey("SearchImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BackImage");

                    b.Navigation("DefaultImage");

                    b.Navigation("FrontImage");

                    b.Navigation("RightImage");

                    b.Navigation("SearchImage");
                });
#pragma warning restore 612, 618
        }
    }
}
